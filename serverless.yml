service: api-FAAS

frameworkVersion: "4"

plugins:
    - serverless-dynamodb
    - serverless-offline

custom:
    stage: ${opt:stage, 'dev'}
    tableThroughputs:
        dev: 1
        default: 5
    dynamodb:
        port: 8000
        migrate: true
        inMemory: true
        convertEmptyValues: true
    serverless-dynamodb:
        stages:
            - dev
        tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
        start:
            port: 8000
            inMemory: true
            migrate: true
            convertEmptyValues: true
            enableLogs: true

provider:
    name: aws
    runtime: nodejs16.x
    region: ${opt:region, 'us-east-1'}
    memorySize: 128
    timeout: 5
    environment:
        STAGE: ${opt:stage, 'dev'}
        DYNAMODB_TABLE_ASSINANTES: AssinantesTable
        DYNAMODB_TABLE_CESTAS: CestasTable
        DYNAMODB_TABLE_ENDERECOS: EnderecosTable
        DYNAMODB_TABLE_ITENS: ItensTable
        DYNAMODB_TABLE_LOJAS: LojasTable
        DYNAMODB_TABLE_USUARIOS: UsuariosTable
        DYNAMODB_TABLE_NOTIFICACOES: NotificacoesTable
        DYNAMODB_TABLE_PLANOS: PlanosTable
        DYNAMODB_TABLE_PRODUTOSAVULSOS: ProdutosAvulsosTable
    iamRoleStatements:
        #Permite que todas as Functions tenham todas as Actions no Dynamodb
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource:
              - arn:aws:dynamodb:us-east-1:*:table/*

functions:
    getAssinante:
        handler: handlers/assinante.getAssinantes
        reservedConcurrency: 2
        events:
            - http:
                  path: assinantes
                  method: get
                  cors: true
    createAssinante:
        handler: handlers/assinante.createAssinante
        reservedConcurrency: 2
        events:
            - http:
                  path: assinantes
                  method: post
                  cors: true
    getUsuarios:
        handler: handlers/usuario.getUsuarios
        reservedConcurrency: 2
        events:
            - http:
                  path: usuarios
                  method: get
                  cors: true
    createUsuario:
        handler: handlers/usuario.createUsuario
        reservedConcurrency: 2
        events:
            - http:
                  path: usuarios
                  method: post
                  cors: true
    deleteUsuario:
        handler: handlers/usuario.deleteUsuario
        reservedConcurrency: 2
        events:
            - http:
                  path: usuarios/{id}
                  method: delete
                  cors: true
    updateUsuario:
        handler: handlers/usuario.updateUsuario
        reservedConcurrency: 2
        events:
            - http:
                  path: usuarios/{id}
                  method: put
                  cors: true

    getLojas:
        handler: handlers/loja.getLojas
        reservedConcurrency: 2
        events:
            - http:
                  path: lojas
                  method: get
                  cors: true
    createLoja:
        handler: handlers/loja.createLoja
        reservedConcurrency: 2
        events:
            - http:
                  path: lojas
                  method: post
                  cors: true
    updateLoja:
        handler: handlers/loja.updateLoja
        reservedConcurrency: 2
        events:
            - http:
                  path: lojas/{id}
                  method: put
                  cors: true
    createCesta:
        handler: handlers/cesta.createCesta
        reservedConcurrency: 2
        events:
            - http:
                  path: cestas
                  method: post
                  cors: true
    getCestas:
        handler: handlers/cesta.getCestas
        reservedConcurrency: 2
        events:
            - http:
                  path: cestas
                  method: get
                  cors: true

    updateDevice:
        handler: handlers/device.updateDevice
        reservedConcurrency: 2
        events:
            - http:
                  path: devices
                  method: post
                  cors: true

    findUserExpoPushToken:
        handler: handlers/device.findUserExpoPushToken
        reservedConcurrency: 2
        events:
            - http:
                  path: devices/user/{user_id}
                  method: get
                  cors: true

    createEndereco:
        handler: handlers/endereco.createEndereco
        reservedConcurrency: 2
        events:
            - http:
                  path: endereco
                  method: post
                  cors: true

    getEnderecoByUser:
        handler: handlers/endereco.getEnderecoByUser
        reservedConcurrency: 2
        events:
            - http:
                  path: endereco/user/{userId}
                  method: get
                  cors: true

    updateEndereco:
        handler: handlers/endereco.updateEndereco
        reservedConcurrency: 2
        events:
            - http:
                  path: endereco/{enderecoId}
                  method: put
                  cors: true

    createItem:
        handler: handlers/item.createItem
        reservedConcurrency: 2
        events:
            - http:
                  path: items
                  method: post
    getItem:
        handler: handlers/item.getItem
        reservedConcurrency: 2
        events:
            - http:
                  path: items/{id}
                  method: get
    listItems:
        handler: handlers/item.listItem
        reservedConcurrency: 2
        events:
            - http:
                  path: items
                  method: get
    updateItem:
        handler: handlers/item.updateItem
        reservedConcurrency: 2
        events:
            - http:
                  path: items/{id}
                  method: put
    deleteItem:
        handler: handler.deleteItem
        reservedConcurrency: 2
        events:
            - http:
                  path: items/{id}
                  method: delete
    getNotificacoes:
        handler: handlers/notificacao.getNotificacoes
        reservedConcurrency: 2
        events:
            - http:
                  path: notificacoes
                  method: get
                  cors: true
    getPlanos:
        handler: handlers/plano.getPlanos
        reservedConcurrency: 2
        events:
            - http:
                  path: planos
                  method: get
                  cors: true
    createPlano:
        handler: handlers/plano.createPlano
        reservedConcurrency: 2
        events:
            - http:
                  path: planos
                  method: post
                  cors: true
    getProdutosAvulsos:
        handler: handlers/produtoAvulso.getProdutosAvulsos
        reservedConcurrency: 2
        events:
            - http:
                  path: produtos-avulsos
                  method: get
                  cors: true
    createProdutoAvulso:
        handler: handlers/produtoAvulso.createProdutoAvulso
        reservedConcurrency: 2
        events:
            - http:
                  path: produtos-avulsos
                  method: post
                  cors: true
    login:
        handler: handlers/auth.login
        reservedConcurrency: 2
        events:
            - http:
                  path: auth
                  method: post
                  cors: true

resources:
    Resources:
        AssinantesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: AssinantesTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: usuario_id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    - IndexName: GSI1
                      KeySchema:
                          - AttributeName: usuario_id
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                      BillingMode: PROVISIONED
                      ProvisionedThroughput:
                          ReadCapacityUnits: 1
                          WriteCapacityUnits: 1
        UsuariosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: UsuariosTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: email
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    - IndexName: EmailIndex
                      KeySchema:
                          - AttributeName: email
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                      BillingMode: PROVISIONED
                      ProvisionedThroughput:
                          ReadCapacityUnits: 1
                          WriteCapacityUnits: 1
        LojasTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: LojasTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        CestasTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: CestasTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        ItensTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ItensTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        NotificacoesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: NotificacoesTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        PlanosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: PlanosTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        ProdutosAvulsosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ProdutosAvulsosTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        EnderecosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: EnderecosTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: userId
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PROVISIONED
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    - IndexName: UserIndex
                      KeySchema:
                          - AttributeName: userId
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                      BillingMode: PROVISIONED
                      ProvisionedThroughput:
                          ReadCapacityUnits: 1
                          WriteCapacityUnits: 1

        AgroMartTableScalingRead:
            Type: AWS::ApplicationAutoScaling::ScalableTarget
            Properties:
                MaxCapacity: 2 #Define um limite máximo de 2 leituras simultâneas
                MinCapacity: 1
                ResourceId: table/*
                RoleARN: arn:aws:iam::123456789012:role/DynamoDBAutoScalingRole
                ScalableDimension: dynamodb:table:ReadCapacityUnits
                ServiceNamespace: dynamodb

        AgroMartTableScalingWrite:
            Type: AWS::ApplicationAutoScaling::ScalableTarget
            Properties:
                MaxCapacity: 2 # 🔹 Define um limite máximo de 2 escritas simultâneas
                MinCapacity: 1
                ResourceId: table/*
                RoleARN: arn:aws:iam::123456789012:role/DynamoDBAutoScalingRole
                ScalableDimension: dynamodb:table:WriteCapacityUnits
                ServiceNamespace: dynamodb
# BudgetAlarm:
#     Type: AWS::Budgets::Budget
#     Properties:
#         Budget:
#             BudgetLimit:
#                 Amount: 5 # 🔹 Alerta ao atingir $5 de custo
#                 Unit: USD
#             TimeUnit: MONTHLY
#             BudgetType: COST
#             CostFilters:
#                 Service:
#                     - AWSLambda
#                     - AmazonDynamoDB
#         NotificationsWithSubscribers:
#             - Notification:
#                   NotificationType: ACTUAL # 🔹 Baseado no valor real consumido
#                   ComparisonOperator: GREATER_THAN
#                   Threshold: 80 # 🔹 Enviar alerta quando atingir 80% do orçamento
#                   ThresholdType: PERCENTAGE
#               Subscribers:
#                   - SubscriptionType: EMAIL
#                     Address: "seu-email@exemplo.com" # 🔹 Troque pelo e-mail desejado

