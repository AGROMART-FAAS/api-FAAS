service: api-FAAS

frameworkVersion: "4"

plugins:
    - serverless-dynamodb
    - serverless-offline

custom:
    stage: ${opt:stage, 'dev'}
    tableThroughputs:
        dev: 1
        default: 5
    dynamodb:
        port: 8000
        migrate: true
        inMemory: true
        convertEmptyValues: true
    serverless-dynamodb:
        stages:
            - dev
        tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
        start:
            port: 8000
            inMemory: true
            migrate: true
            convertEmptyValues: true
            enableLogs: true

provider:
    name: aws
    runtime: nodejs16.x
    region: ${opt:region, 'us-east-1'}
    memorySize: 1024
    timeout: 10
    environment:
        STAGE: ${opt:stage, 'dev'}
        DYNAMODB_TABLE_ASSINANTES: AssinantesTable
        DYNAMODB_TABLE_CESTAS: CestasTable
        DYNAMODB_TABLE_ENDERECOS: EnderecosTable
        DYNAMODB_TABLE_ITENS: ItensTable
        DYNAMODB_TABLE_LOJAS: LojasTable
        DYNAMODB_TABLE_USUARIOS: UsuariosTable
        DYNAMODB_TABLE_NOTIFICACOES: NotificacoesTable
        DYNAMODB_TABLE_PLANOS: PlanosTable
        DYNAMODB_TABLE_PRODUTOSAVULSOS: ProdutosAvulsosTable
    iamRoleStatements:
        #Permite que todas as Functions tenham todas as Actions no Dynamodb
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource:
              - arn:aws:dynamodb:us-east-1:*:table/*

functions:
    getAssinante:
        handler: handlers/assinante.getAssinantes
        events:
            - http:
                  path: assinantes
                  method: get
                  cors: true
    createAssinante:
        handler: handlers/assinante.createAssinante
        events:
            - http:
                  path: assinantes
                  method: post
                  cors: true
    getUsuarios:
        handler: handlers/usuario.getUsuarios
        events:
            - http:
                  path: usuarios
                  method: get
                  cors: true
    createUsuario:
        handler: handlers/usuario.createUsuario
        events:
            - http:
                  path: usuarios
                  method: post
                  cors: true
    deleteUsuario:
        handler: handlers/usuario.deleteUsuario
        events:
            - http:
                  path: usuarios/{id}
                  method: delete
                  cors: true
    getLojas:
        handler: handlers/loja.getLojas
        events:
            - http:
                  path: lojas
                  method: get
                  cors: true
    createLoja:
        handler: handlers/loja.createLoja
        events:
            - http:
                  path: lojas
                  method: post
                  cors: true
    updateLoja:
        handler: handlers/loja.updateLoja
        events:
            - http:
                  path: lojas/{id}
                  method: put
                  cors: true
    createCesta:
        handler: handlers/cesta.createCesta
        events:
            - http:
                  path: cestas
                  method: post
                  cors: true
    getCestas:
        handler: handlers/cesta.getCestas
        events:
            - http:
                  path: cestas
                  method: get
                  cors: true

    updateDevice:
        handler: handlers/device.updateDevice
        events:
            - http:
                  path: devices
                  method: post
                  cors: true

    findUserExpoPushToken:
        handler: handlers/device.findUserExpoPushToken
        events:
            - http:
                  path: devices/user/{user_id}
                  method: get
                  cors: true

    createEndereco:
        handler: handlers/enderecoHandler.createEndereco
        events:
            - http:
                  path: endereco
                  method: post
                  cors: true

    getEnderecoByUser:
        handler: handlers/endereco.getEnderecoByUser
        events:
            - http:
                  path: endereco/user/{user_id}
                  method: get
                  cors: true
    createItem:
        handler: handlers/item.createItem
        events:
            - http:
                  path: items
                  method: post
    getItem:
        handler: handlers/item.getItem
        events:
            - http:
                  path: items/{id}
                  method: get
    listItems:
        handler: handlers/item.listItem
        events:
            - http:
                  path: items
                  method: get
    updateItem:
        handler: handlers/item.updateItem
        events:
            - http:
                  path: items/{id}
                  method: put
    deleteItem:
        handler: handler.deleteItem
        events:
            - http:
                  path: items/{id}
                  method: delete
    getNotificacoes:
        handler: handlers/notificacao.getNotificacoes
        events:
            - http:
                  path: notificacoes
                  method: get
                  cors: true
    getPlanos:
        handler: handlers/plano.getPlanos
        events:
            - http:
                  path: planos
                  method: get
                  cors: true
    createPlano:
        handler: handlers/plano.createPlano
        events:
            - http:
                  path: planos
                  method: post
                  cors: true
    getProdutosAvulsos:
        handler: handlers/produtoAvulso.getProdutosAvulsos
        events:
            - http:
                  path: produtos-avulsos
                  method: get
                  cors: true
    createProdutoAvulso:
        handler: handlers/produtoAvulso.createProdutoAvulso
        events:
            - http:
                  path: produtos-avulsos
                  method: post
                  cors: true
    login:
        handler: handlers/auth.login
        events:
            - http:
                  path: auth
                  method: post
                  cors: true

resources:
    Resources:
        AssinantesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: AssinantesTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: usuario_id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                GlobalSecondaryIndexes:
                    - IndexName: GSI1
                      KeySchema:
                          - AttributeName: usuario_id
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
        UsuariosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: UsuariosTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: email
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                GlobalSecondaryIndexes:
                    - IndexName: EmailIndex
                      KeySchema:
                          - AttributeName: email
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                BillingMode: PAY_PER_REQUEST
        LojasTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: LojasTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        CestasTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: CestasTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        ItensTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ItemTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        NotificacoesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: NotificacoesTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        PlanosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: PlanosTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        ProdutosAvulsosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ProdutosAvulsosTable
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
